module Simulation.Properties where
open import Level
  using (Level)
  renaming (zero to lzero; suc to lsuc)
open import Data.Nat
  using (‚Ñï; zero; suc; _+_; _‚â§_; z‚â§n; s‚â§s)
open import Data.Fin
  using (Fin; inject‚ÇÅ; inject‚â§; inject+; cast; to‚Ñï; from‚Ñï; from‚Ñï<)
  renaming (zero to zeroF; suc to sucF)
open import Data.Fin.Patterns
open import Data.Product
  using (‚àÉ; _√ó_; _,_; proj‚ÇÅ; proj‚ÇÇ)
open import Data.Sum
  using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Relation.Binary.PropositionalEquality
  using (_‚â°_; refl)
  renaming (sym to ‚â°sym; cong to ‚â°cong; cong-app to ‚â°cong-app)
open Relation.Binary.PropositionalEquality.‚â°-Reasoning
open import Relation.Unary
  using (_‚àà_; _‚ü®‚äé‚ü©_; ‚àÖ; Satisfiable; Universal; Empty; Pred; _‚äÜ‚Ä≤_)
open import Function.Base
  using (id; case_of_)

open import Relation.Nullary using (¬¨_)
open import Relation.Nullary.Negation
  using (contradiction; contraposition; ¬¨‚àÉ‚ü∂‚àÄ¬¨)
  
open import Data.Empty
  using (‚ä•; ‚ä•-elim)
open import Data.Unit.Base
  using (‚ä§; tt)

open import Base
open import Word
open import NA
open import Simulation.Base

------------------------------------------------------------------
-- the empty relation ‚àÖ is always a simulation between any NA

‚àÖ-sim : {X‚ÇÅ X‚ÇÇ A : Set} ‚Üí (na‚ÇÅ : NA X‚ÇÅ A) ‚Üí (na‚ÇÇ : NA X‚ÇÇ A)
        ‚Üí IsSimulation na‚ÇÅ na‚ÇÇ ‚àÖ
‚àÖ-sim na‚ÇÅ na‚ÇÇ = record {
  acceptance =
    -- for all `x : X‚ÇÅ` and `y : X‚ÇÇ`, `(x , y) ‚àà R` never holds
    Œª x y ‚Üí Œª ();
  step-match =
    -- the same as above
    Œª x y ‚Üí Œª ()
  }

------------------------------------------------------------------
-- soundness

-- soundness wrt. finite language of fixed length

Sim-soundFin :
  {a : Level} {X‚ÇÅ X‚ÇÇ A : Set} ‚Üí (na‚ÇÅ : NA X‚ÇÅ A) ‚Üí (na‚ÇÇ : NA X‚ÇÇ A)
  ‚Üí (R : Simulation {a} na‚ÇÅ na‚ÇÇ)
  ‚Üí (x : X‚ÇÅ) ‚Üí (y : X‚ÇÇ) ‚Üí (x , y) ‚àà (Simulation.ùëÖ R)
  ‚Üí (n : ‚Ñï) ‚Üí FinAccLang na‚ÇÅ x n ‚äÜ‚Ä≤ FinAccLang na‚ÇÇ y n
-- the proof is by induction on the length
-- base case: when the length is `0`
Sim-soundFin na‚ÇÅ na‚ÇÇ (aSim R R-sim) x y xRy 0 =
  -- for any `as : FinWord 0 A`, if `as ‚àà FinAccLang na‚ÇÅ x 0`,
  Œª as as‚ààFinAccLang[x] ‚Üí
    -- (1) the existence of such `as` implies that
    --     the state `x` is an accepting state
    let x-acc = (Equiv.‚áí (FinAccLang0-‚àÉ‚áî‚ààaccept na‚ÇÅ x))
                  (as , as‚ààFinAccLang[x]) in
    -- (2) by the acceptance condition of simulation,
    --     the state `y` is also an accepting state
    let y-acc = (IsSimulation.acceptance R-sim) x y xRy x-acc in
    -- (3) by (2), `as : FinWord 0 A` is also accepted
    --     in `na‚ÇÇ` from the state `y`
    (Equiv.‚áê (FinAccLang0-Œ†‚áî‚ààaccept na‚ÇÇ y)) y-acc as
-- inductive case: when the length is `suc n`
Sim-soundFin na‚ÇÅ na‚ÇÇ (aSim R R-sim) x y xRy (suc n) =
  -- for any `as : FinWord (suc n) A`,
  Œª as ‚Üí
  -- if `as ‚àà FinAccLang na‚ÇÅ x (suc n)`, with
  -- some witness `xs : FinWord (suc (suc n)) X‚ÇÅ` s.t.:
  -- [1] it starts with `x`,
  -- [2] it is a run on `as`,
  -- [3] it ends with an accepting state,
  Œª { as‚ààFinAccLang[x]@(xs , xs-head‚â°x , xs-run-on-as , _) ‚Üí
    -- (1) `tailF xs` witnesses acceptance of `tailF as`
    --     from the state `xs 1F`
    let as+‚ààFinAccLang[xs‚ÇÅ] : (tailF as) ‚àà FinAccLang na‚ÇÅ (xs 1F) n
        as+‚ààFinAccLang[xs‚ÇÅ] = FinAccLang-pop na‚ÇÅ as‚ààFinAccLang[x] in
    -- (2) by the stap-match condition of simulation,
    --     `(x , y) ‚àà R` and
    --     `(x , as 0F , xs 1F) ‚â° (xs 0F , as 0F , xs 1F)
    --                          ‚àà NA.trans na‚ÇÅ`
    --     imply existence of some state `y' : X‚ÇÇ` s.t.
    --     `(y , as 0F , y')` is a transition in `na‚ÇÇ`
    --     and `(xs 1F , y') ‚àà R`
    let (y' , y-as‚ÇÄ‚Üíy' , xs‚ÇÅRy') =
          (IsSimulation.step-match R-sim) x y xRy (as 0F) (xs 1F)
          ((NA.trans na‚ÇÅ) ‚ü® xs-run-on-as 0F ‚ü©‚àã
           (begin
            (xs 0F , as 0F , xs 1F)
           ‚â°‚ü® ‚â°cong (_, as 0F , xs 1F) xs-head‚â°x ‚ü©
            (x , as 0F , xs 1F)
           ‚àé)) in
    -- (4) by I.H., `tailF as` is also accepted in `na‚ÇÇ`
    --     from the state `y'`,
    let as+‚ààFinAccLang[y'] : (tailF as) ‚àà (FinAccLang na‚ÇÇ y' n)
        as+‚ààFinAccLang[y'] =
          Sim-soundFin na‚ÇÅ na‚ÇÇ (aSim R R-sim) (xs 1F) y' xs‚ÇÅRy'
                       n (tailF as) as+‚ààFinAccLang[xs‚ÇÅ] in
    -- (5) since `(y , as 0F , y')` is a transition in `na‚ÇÇ`,
    --     `as` is accepted in `na‚ÇÇ` from the state `y`
    FinAccLang-unpop na‚ÇÇ as+‚ààFinAccLang[y'] y-as‚ÇÄ‚Üíy'
  }

-- soundness wrt. finite language

Sim-soundFIN :
  {a : Level} {X‚ÇÅ X‚ÇÇ A : Set} ‚Üí (na‚ÇÅ : NA X‚ÇÅ A) ‚Üí (na‚ÇÇ : NA X‚ÇÇ A)
  ‚Üí (R : Simulation {a} na‚ÇÅ na‚ÇÇ)
  ‚Üí (x : X‚ÇÅ) ‚Üí (y : X‚ÇÇ) ‚Üí (x , y) ‚àà (Simulation.ùëÖ R)
  ‚Üí FINAccLang na‚ÇÅ x ‚äÜ‚Ä≤ FINAccLang na‚ÇÇ y
Sim-soundFIN na‚ÇÅ na‚ÇÇ R x y xRy =
  Ôºª Sim-soundFin na‚ÇÅ na‚ÇÇ R x y xRy ÔºΩ'

-- soundness wrt. infinite language

Sim-soundINF :
  {a : Level} {X‚ÇÅ X‚ÇÇ A : Set} ‚Üí (na‚ÇÅ : NA X‚ÇÅ A) ‚Üí (na‚ÇÇ : NA X‚ÇÇ A)
  ‚Üí (R : Simulation {a} na‚ÇÅ na‚ÇÇ)
  ‚Üí (x : X‚ÇÅ) ‚Üí (y : X‚ÇÇ) ‚Üí (x , y) ‚àà (Simulation.ùëÖ R)
  ‚Üí INFAccLang na‚ÇÅ x ‚äÜ‚Ä≤ INFAccLang na‚ÇÇ y
Sim-soundINF {a} {X‚ÇÅ} {X‚ÇÇ} {A} na‚ÇÅ na‚ÇÇ (aSim R R-sim) x y xRy
  -- for any `as : INFWord A`,
  as
  -- if `as ‚àà INFAccLang na‚ÇÇ x`, with some
  -- witness `xs : INFWord X‚ÇÅ` s.t.:
  -- [1] it starts with `x`,
  -- [2] it is a run on `as`,
  (xs , xs-head‚â°x , xs-run-on-as) =
    -- we will construct a sequence `ys : INFWord X‚ÇÇ` s.t.:
    -- [1] it starts with `y`,
    -- [2] it is a run on `as`,
    -- [3] at any point `k : Nat`, `(xs k , ys k) ‚àà R`
    -- inductively below;
    -- the additional property [3] is crucial to get induction work
    (ys , refl , ys-run-on-as)
  where
  ys : INFWord X‚ÇÇ
  ys-run-on-as :
    ‚àÄ (k : ‚Ñï) ‚Üí (ys k , as k , ys (suc k)) ‚àà (NA.trans na‚ÇÇ)
  xsRys :
    ‚àÄ (k : ‚Ñï) ‚Üí (xs k , ys k) ‚àà R
  -- construction of the sequence `ys`: base case
  ys 0 =
    -- we take `y` as the head of `ys`
    y
  -- construction of the sequence `ys`: inductive case
  ys (suc n) =
    -- by I.H., we have `ys n : X‚ÇÇ` s.t. [3] 
    -- therefore, by the step-match condition of simulation,
    -- `(xs n , ys n) ‚àà R` and
    -- `(xs n , as n , xs (suc n)) ‚àà NA.trans na‚ÇÅ`
    -- imply existence of some state `y' : X‚ÇÇ` s.t.
    -- `(ys n , as n , y') ‚àà NA.trans na‚ÇÇ`
    -- and `(xs (suc n) , y') ‚àà R'
    let (y' , ys[n]-as[n]‚Üíy' , xs[n+1]Rys[n+1]) =
          (IsSimulation.step-match R-sim) (xs n) (ys n) (xsRys n)
          (as n) (xs (suc n)) (xs-run-on-as n) in
    -- we can take `y'` as `ys (suc n)`
    y'
  -- the property [1]: clear by the way `ys` is constructed
  ys-run-on-as n =
    let (y' , ys[n]-as[n]‚Üíy' , xs[n+1]Rys[n+1]) =
          (IsSimulation.step-match R-sim) (xs n) (ys n) (xsRys n)
          (as n) (xs (suc n)) (xs-run-on-as n) in
    ys[n]-as[n]‚Üíy'
  -- the property [3] at the head: consequence of assumptions
  xsRys 0 = R ‚ü® xRy ‚ü©‚àã
            (begin
              (x , y)
            ‚â°Àò‚ü® ‚â°cong (_, y) xs-head‚â°x ‚ü©
              (headI xs , y)
            ‚àé)
  -- the property [3] at the tail:
  -- clear by the way `ys` is constructed
  xsRys (suc n) =
    let (y' , ys[n]-as[n]‚Üíy' , xs[n+1]Rys[n+1]) =
          (IsSimulation.step-match R-sim) (xs n) (ys n) (xsRys n)
          (as n) (xs (suc n)) (xs-run-on-as n) in
    xs[n+1]Rys[n+1]
